-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Parser.y
-----------------------------------------------------------------------------


terminal String is unused
terminal Integer is unused
terminal Obj is unused
terminal Boolean is unused
terminal true is unused
terminal false is unused
terminal Nothing is unused
terminal none is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parserCalc -> Prog                          (0)
	Prog -> Cl Stmts                                   (1)
	Cl ->                                              (2)
	Cl -> Cl ClassSigBody                              (3)
	ClassSigBody -> ClassSignature ClassBody           (4)
	ClassSignature -> CS                               (5)
	ClassSignature -> CS extends ident                 (6)
	CS -> class ident '(' FormalArgs ')'               (7)
	FormalArgs ->                                      (8)
	FormalArgs -> ident ':' ident IDs                  (9)
	IDs ->                                             (10)
	IDs -> IDs ',' ident ':' ident                     (11)
	ClassBody -> '{' Stmts Method '}'                  (12)
	Method ->                                          (13)
	Method -> Method MethodRest                        (14)
	MethodRest -> MR StmtBlock                         (15)
	MethodRest -> MR ':' ident StmtBlock               (16)
	MR -> def ident '(' FormalArgs ')'                 (17)
	StmtBlock -> '{' Stmts '}'                         (18)
	Stmts ->                                           (19)
	Stmts -> Stmts Stmt                                (20)
	Stmt -> IfStmt EStmt                               (21)
	Stmt -> while RExpr StmtBlock                      (22)
	Stmt -> LExpr AStmt                                (23)
	Stmt -> LExpr ':' ident AStmt                      (24)
	Stmt -> RExpr ';'                                  (25)
	Stmt -> return ';'                                 (26)
	Stmt -> return RExpr ';'                           (27)
	Stmt -> Typecase                                   (28)
	IfStmt -> if RExpr StmtBlock                       (29)
	EStmt -> ElifStmt ElseStmt                         (30)
	ElifStmt ->                                        (31)
	ElifStmt -> ElifStmt elif RExpr StmtBlock          (32)
	ElseStmt ->                                        (33)
	ElseStmt -> else StmtBlock                         (34)
	AStmt -> '=' RExpr ';'                             (35)
	Typecase -> typecase RExpr '{' TypeAlternative '}'   (36)
	TypeAlternative ->                                 (37)
	TypeAlternative -> TypeAlternative ident ':' ident StmtBlock   (38)
	LExpr -> ident                                     (39)
	LExpr -> RExpr '.' ident                           (40)
	RExpr -> string_literal                            (41)
	RExpr -> integer_literal                           (42)
	RExpr -> LExpr                                     (43)
	RExpr -> RExpr '+' RExpr                           (44)
	RExpr -> RExpr '-' RExpr                           (45)
	RExpr -> RExpr '*' RExpr                           (46)
	RExpr -> RExpr '/' RExpr                           (47)
	RExpr -> '-' RExpr                                 (48)
	RExpr -> '(' RExpr ')'                             (49)
	RExpr -> RExpr '==' RExpr                          (50)
	RExpr -> RExpr '<=' RExpr                          (51)
	RExpr -> RExpr '<' RExpr                           (52)
	RExpr -> RExpr '>=' RExpr                          (53)
	RExpr -> RExpr '>' RExpr                           (54)
	RExpr -> RExpr and RExpr                           (55)
	RExpr -> RExpr or RExpr                            (56)
	RExpr -> not RExpr                                 (57)
	RExpr -> RExpr '.' ident '(' ActualArgs ')'        (58)
	RExpr -> ident '(' ActualArgs ')'                  (59)
	ActualArgs ->                                      (60)
	ActualArgs -> RExpr ActArg                         (61)
	ActArg ->                                          (62)
	ActArg -> ActArg ',' RExpr                         (63)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	ident          { ID $$ }
	integer_literal{ INT $$ }
	string_literal { STRINGLITERAL $$ }
	class          { CLASS }
	def            { DEF }
	extends        { EXTENDS }
	if             { IF }
	elif           { ELIF }
	else           { ELSE }
	while          { WHILE }
	return         { RETURN }
	typecase       { TYPECASE }
	String         { STRING }
	Integer        { INTEGER }
	Obj            { OBJ }
	Boolean        { BOOLEAN }
	true           { TRUE }
	false          { FALSE }
	and            { AND }
	or             { OR }
	not            { NOT }
	Nothing        { NOTHING }
	none           { NONE }
	'='            { GETS }
	'+'            { PLUS }
	'-'            { MINUS }
	'*'            { TIMES }
	'/'            { DIVIDE }
	'=='           { EQUALS }
	'>='           { ATMOST }
	'<'            { LESS }
	'<='           { ATLEAST }
	'>'            { MORE }
	'{'            { LBRACE }
	'}'            { RBRACE }
	'('            { LPAREN }
	')'            { RPAREN }
	','            { COMMA }
	';'            { SEMICOLON }
	'.'            { DOT }
	':'            { COLON }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parserCalc rule  0
	Prog            rule  1
	Cl              rules 2, 3
	ClassSigBody    rule  4
	ClassSignature  rules 5, 6
	CS              rule  7
	FormalArgs      rules 8, 9
	IDs             rules 10, 11
	ClassBody       rule  12
	Method          rules 13, 14
	MethodRest      rules 15, 16
	MR              rule  17
	StmtBlock       rule  18
	Stmts           rules 19, 20
	Stmt            rules 21, 22, 23, 24, 25, 26, 27, 28
	IfStmt          rule  29
	EStmt           rule  30
	ElifStmt        rules 31, 32
	ElseStmt        rules 33, 34
	AStmt           rule  35
	Typecase        rule  36
	TypeAlternative rules 37, 38
	LExpr           rules 39, 40
	RExpr           rules 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59
	ActualArgs      rules 60, 61
	ActArg          rules 62, 63

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	ident          reduce using rule 2
	integer_literalreduce using rule 2
	string_literal reduce using rule 2
	class          reduce using rule 2
	if             reduce using rule 2
	while          reduce using rule 2
	return         reduce using rule 2
	typecase       reduce using rule 2
	not            reduce using rule 2
	'-'            reduce using rule 2
	'('            reduce using rule 2
	%eof           reduce using rule 2

	Prog           goto state 3
	Cl             goto state 2

State 1



	Cl             goto state 2

State 2

	Prog -> Cl . Stmts                                  (rule 1)
	Cl -> Cl . ClassSigBody                             (rule 3)

	ident          reduce using rule 19
	integer_literalreduce using rule 19
	string_literal reduce using rule 19
	class          shift, and enter state 8
	if             reduce using rule 19
	while          reduce using rule 19
	return         reduce using rule 19
	typecase       reduce using rule 19
	not            reduce using rule 19
	'-'            reduce using rule 19
	'('            reduce using rule 19
	%eof           reduce using rule 19

	ClassSigBody   goto state 4
	ClassSignature goto state 5
	CS             goto state 6
	Stmts          goto state 7

State 3

	%start_parserCalc -> Prog .                         (rule 0)

	%eof           accept


State 4

	Cl -> Cl ClassSigBody .                             (rule 3)

	ident          reduce using rule 3
	integer_literalreduce using rule 3
	string_literal reduce using rule 3
	class          reduce using rule 3
	if             reduce using rule 3
	while          reduce using rule 3
	return         reduce using rule 3
	typecase       reduce using rule 3
	not            reduce using rule 3
	'-'            reduce using rule 3
	'('            reduce using rule 3
	%eof           reduce using rule 3


State 5

	ClassSigBody -> ClassSignature . ClassBody          (rule 4)

	'{'            shift, and enter state 27

	ClassBody      goto state 26

State 6

	ClassSignature -> CS .                              (rule 5)
	ClassSignature -> CS . extends ident                (rule 6)

	extends        shift, and enter state 25
	'{'            reduce using rule 5


State 7

	Prog -> Cl Stmts .                                  (rule 1)
	Stmts -> Stmts . Stmt                               (rule 20)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	if             shift, and enter state 18
	while          shift, and enter state 19
	return         shift, and enter state 20
	typecase       shift, and enter state 21
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24
	%eof           reduce using rule 1

	Stmt           goto state 10
	IfStmt         goto state 11
	Typecase       goto state 12
	LExpr          goto state 13
	RExpr          goto state 14

State 8

	CS -> class . ident '(' FormalArgs ')'              (rule 7)

	ident          shift, and enter state 9


State 9

	CS -> class ident . '(' FormalArgs ')'              (rule 7)

	'('            shift, and enter state 58


State 10

	Stmts -> Stmts Stmt .                               (rule 20)

	ident          reduce using rule 20
	integer_literalreduce using rule 20
	string_literal reduce using rule 20
	def            reduce using rule 20
	if             reduce using rule 20
	while          reduce using rule 20
	return         reduce using rule 20
	typecase       reduce using rule 20
	not            reduce using rule 20
	'-'            reduce using rule 20
	'}'            reduce using rule 20
	'('            reduce using rule 20
	%eof           reduce using rule 20


State 11

	Stmt -> IfStmt . EStmt                              (rule 21)

	ident          reduce using rule 31
	integer_literalreduce using rule 31
	string_literal reduce using rule 31
	def            reduce using rule 31
	if             reduce using rule 31
	elif           reduce using rule 31
	else           reduce using rule 31
	while          reduce using rule 31
	return         reduce using rule 31
	typecase       reduce using rule 31
	not            reduce using rule 31
	'-'            reduce using rule 31
	'}'            reduce using rule 31
	'('            reduce using rule 31
	%eof           reduce using rule 31

	EStmt          goto state 56
	ElifStmt       goto state 57

State 12

	Stmt -> Typecase .                                  (rule 28)

	ident          reduce using rule 28
	integer_literalreduce using rule 28
	string_literal reduce using rule 28
	def            reduce using rule 28
	if             reduce using rule 28
	while          reduce using rule 28
	return         reduce using rule 28
	typecase       reduce using rule 28
	not            reduce using rule 28
	'-'            reduce using rule 28
	'}'            reduce using rule 28
	'('            reduce using rule 28
	%eof           reduce using rule 28


State 13

	Stmt -> LExpr . AStmt                               (rule 23)
	Stmt -> LExpr . ':' ident AStmt                     (rule 24)
	RExpr -> LExpr .                                    (rule 43)

	and            reduce using rule 43
	or             reduce using rule 43
	'='            shift, and enter state 54
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            reduce using rule 43
	'/'            reduce using rule 43
	'=='           reduce using rule 43
	'>='           reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'>'            reduce using rule 43
	';'            reduce using rule 43
	'.'            reduce using rule 43
	':'            shift, and enter state 55

	AStmt          goto state 53

State 14

	Stmt -> RExpr . ';'                                 (rule 25)
	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	';'            shift, and enter state 51
	'.'            shift, and enter state 52


State 15

	LExpr -> ident .                                    (rule 39)
	RExpr -> ident . '(' ActualArgs ')'                 (rule 59)

	and            reduce using rule 39
	or             reduce using rule 39
	'='            reduce using rule 39
	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'/'            reduce using rule 39
	'=='           reduce using rule 39
	'>='           reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'>'            reduce using rule 39
	'{'            reduce using rule 39
	'('            shift, and enter state 39
	')'            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	'.'            reduce using rule 39
	':'            reduce using rule 39


State 16

	RExpr -> integer_literal .                          (rule 42)

	and            reduce using rule 42
	or             reduce using rule 42
	'+'            reduce using rule 42
	'-'            reduce using rule 42
	'*'            reduce using rule 42
	'/'            reduce using rule 42
	'=='           reduce using rule 42
	'>='           reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'>'            reduce using rule 42
	'{'            reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	'.'            reduce using rule 42


State 17

	RExpr -> string_literal .                           (rule 41)

	and            reduce using rule 41
	or             reduce using rule 41
	'+'            reduce using rule 41
	'-'            reduce using rule 41
	'*'            reduce using rule 41
	'/'            reduce using rule 41
	'=='           reduce using rule 41
	'>='           reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'>'            reduce using rule 41
	'{'            reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	'.'            reduce using rule 41


State 18

	IfStmt -> if . RExpr StmtBlock                      (rule 29)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 38

State 19

	Stmt -> while . RExpr StmtBlock                     (rule 22)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 37

State 20

	Stmt -> return . ';'                                (rule 26)
	Stmt -> return . RExpr ';'                          (rule 27)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24
	';'            shift, and enter state 36

	LExpr          goto state 30
	RExpr          goto state 35

State 21

	Typecase -> typecase . RExpr '{' TypeAlternative '}'    (rule 36)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 34

State 22

	RExpr -> not . RExpr                                (rule 57)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 33

State 23

	RExpr -> '-' . RExpr                                (rule 48)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 32

State 24

	RExpr -> '(' . RExpr ')'                            (rule 49)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 31

State 25

	ClassSignature -> CS extends . ident                (rule 6)

	ident          shift, and enter state 29


State 26

	ClassSigBody -> ClassSignature ClassBody .          (rule 4)

	ident          reduce using rule 4
	integer_literalreduce using rule 4
	string_literal reduce using rule 4
	class          reduce using rule 4
	if             reduce using rule 4
	while          reduce using rule 4
	return         reduce using rule 4
	typecase       reduce using rule 4
	not            reduce using rule 4
	'-'            reduce using rule 4
	'('            reduce using rule 4
	%eof           reduce using rule 4


State 27

	ClassBody -> '{' . Stmts Method '}'                 (rule 12)

	ident          reduce using rule 19
	integer_literalreduce using rule 19
	string_literal reduce using rule 19
	def            reduce using rule 19
	if             reduce using rule 19
	while          reduce using rule 19
	return         reduce using rule 19
	typecase       reduce using rule 19
	not            reduce using rule 19
	'-'            reduce using rule 19
	'}'            reduce using rule 19
	'('            reduce using rule 19

	Stmts          goto state 28

State 28

	ClassBody -> '{' Stmts . Method '}'                 (rule 12)
	Stmts -> Stmts . Stmt                               (rule 20)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	def            reduce using rule 13
	if             shift, and enter state 18
	while          shift, and enter state 19
	return         shift, and enter state 20
	typecase       shift, and enter state 21
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'}'            reduce using rule 13
	'('            shift, and enter state 24

	Method         goto state 86
	Stmt           goto state 10
	IfStmt         goto state 11
	Typecase       goto state 12
	LExpr          goto state 13
	RExpr          goto state 14

State 29

	ClassSignature -> CS extends ident .                (rule 6)

	'{'            reduce using rule 6


State 30

	RExpr -> LExpr .                                    (rule 43)

	and            reduce using rule 43
	or             reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            reduce using rule 43
	'/'            reduce using rule 43
	'=='           reduce using rule 43
	'>='           reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'>'            reduce using rule 43
	'{'            reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	'.'            reduce using rule 43


State 31

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> '(' RExpr . ')'                            (rule 49)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	')'            shift, and enter state 85
	'.'            shift, and enter state 52


State 32

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> '-' RExpr .                                (rule 48)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 48
	or             reduce using rule 48
	'+'            reduce using rule 48
	'-'            reduce using rule 48
	'*'            reduce using rule 48
	'/'            reduce using rule 48
	'=='           reduce using rule 48
	'>='           reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'>'            reduce using rule 48
	'{'            reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48
	'.'            reduce using rule 48


State 33

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> not RExpr .                                (rule 57)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 57
	or             reduce using rule 57
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	'{'            reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	';'            reduce using rule 57
	'.'            shift, and enter state 52


State 34

	Typecase -> typecase RExpr . '{' TypeAlternative '}'    (rule 36)
	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	'{'            shift, and enter state 84
	'.'            shift, and enter state 52


State 35

	Stmt -> return RExpr . ';'                          (rule 27)
	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	';'            shift, and enter state 83
	'.'            shift, and enter state 52


State 36

	Stmt -> return ';' .                                (rule 26)

	ident          reduce using rule 26
	integer_literalreduce using rule 26
	string_literal reduce using rule 26
	def            reduce using rule 26
	if             reduce using rule 26
	while          reduce using rule 26
	return         reduce using rule 26
	typecase       reduce using rule 26
	not            reduce using rule 26
	'-'            reduce using rule 26
	'}'            reduce using rule 26
	'('            reduce using rule 26
	%eof           reduce using rule 26


State 37

	Stmt -> while RExpr . StmtBlock                     (rule 22)
	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	'{'            shift, and enter state 81
	'.'            shift, and enter state 52

	StmtBlock      goto state 82

State 38

	IfStmt -> if RExpr . StmtBlock                      (rule 29)
	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	'{'            shift, and enter state 81
	'.'            shift, and enter state 52

	StmtBlock      goto state 80

State 39

	RExpr -> ident '(' . ActualArgs ')'                 (rule 59)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24
	')'            reduce using rule 60

	LExpr          goto state 30
	RExpr          goto state 78
	ActualArgs     goto state 79

State 40

	RExpr -> RExpr and . RExpr                          (rule 55)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 77

State 41

	RExpr -> RExpr or . RExpr                           (rule 56)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 76

State 42

	RExpr -> RExpr '+' . RExpr                          (rule 44)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 75

State 43

	RExpr -> RExpr '-' . RExpr                          (rule 45)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 74

State 44

	RExpr -> RExpr '*' . RExpr                          (rule 46)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 73

State 45

	RExpr -> RExpr '/' . RExpr                          (rule 47)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 72

State 46

	RExpr -> RExpr '==' . RExpr                         (rule 50)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 71

State 47

	RExpr -> RExpr '>=' . RExpr                         (rule 53)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 70

State 48

	RExpr -> RExpr '<' . RExpr                          (rule 52)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 69

State 49

	RExpr -> RExpr '<=' . RExpr                         (rule 51)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 68

State 50

	RExpr -> RExpr '>' . RExpr                          (rule 54)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 67

State 51

	Stmt -> RExpr ';' .                                 (rule 25)

	ident          reduce using rule 25
	integer_literalreduce using rule 25
	string_literal reduce using rule 25
	def            reduce using rule 25
	if             reduce using rule 25
	while          reduce using rule 25
	return         reduce using rule 25
	typecase       reduce using rule 25
	not            reduce using rule 25
	'-'            reduce using rule 25
	'}'            reduce using rule 25
	'('            reduce using rule 25
	%eof           reduce using rule 25


State 52

	LExpr -> RExpr '.' . ident                          (rule 40)
	RExpr -> RExpr '.' . ident '(' ActualArgs ')'       (rule 58)

	ident          shift, and enter state 66


State 53

	Stmt -> LExpr AStmt .                               (rule 23)

	ident          reduce using rule 23
	integer_literalreduce using rule 23
	string_literal reduce using rule 23
	def            reduce using rule 23
	if             reduce using rule 23
	while          reduce using rule 23
	return         reduce using rule 23
	typecase       reduce using rule 23
	not            reduce using rule 23
	'-'            reduce using rule 23
	'}'            reduce using rule 23
	'('            reduce using rule 23
	%eof           reduce using rule 23


State 54

	AStmt -> '=' . RExpr ';'                            (rule 35)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 65

State 55

	Stmt -> LExpr ':' . ident AStmt                     (rule 24)

	ident          shift, and enter state 64


State 56

	Stmt -> IfStmt EStmt .                              (rule 21)

	ident          reduce using rule 21
	integer_literalreduce using rule 21
	string_literal reduce using rule 21
	def            reduce using rule 21
	if             reduce using rule 21
	while          reduce using rule 21
	return         reduce using rule 21
	typecase       reduce using rule 21
	not            reduce using rule 21
	'-'            reduce using rule 21
	'}'            reduce using rule 21
	'('            reduce using rule 21
	%eof           reduce using rule 21


State 57

	EStmt -> ElifStmt . ElseStmt                        (rule 30)
	ElifStmt -> ElifStmt . elif RExpr StmtBlock         (rule 32)

	ident          reduce using rule 33
	integer_literalreduce using rule 33
	string_literal reduce using rule 33
	def            reduce using rule 33
	if             reduce using rule 33
	elif           shift, and enter state 62
	else           shift, and enter state 63
	while          reduce using rule 33
	return         reduce using rule 33
	typecase       reduce using rule 33
	not            reduce using rule 33
	'-'            reduce using rule 33
	'}'            reduce using rule 33
	'('            reduce using rule 33
	%eof           reduce using rule 33

	ElseStmt       goto state 61

State 58

	CS -> class ident '(' . FormalArgs ')'              (rule 7)

	ident          shift, and enter state 60
	')'            reduce using rule 8

	FormalArgs     goto state 59

State 59

	CS -> class ident '(' FormalArgs . ')'              (rule 7)

	')'            shift, and enter state 101


State 60

	FormalArgs -> ident . ':' ident IDs                 (rule 9)

	':'            shift, and enter state 100


State 61

	EStmt -> ElifStmt ElseStmt .                        (rule 30)

	ident          reduce using rule 30
	integer_literalreduce using rule 30
	string_literal reduce using rule 30
	def            reduce using rule 30
	if             reduce using rule 30
	while          reduce using rule 30
	return         reduce using rule 30
	typecase       reduce using rule 30
	not            reduce using rule 30
	'-'            reduce using rule 30
	'}'            reduce using rule 30
	'('            reduce using rule 30
	%eof           reduce using rule 30


State 62

	ElifStmt -> ElifStmt elif . RExpr StmtBlock         (rule 32)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 99

State 63

	ElseStmt -> else . StmtBlock                        (rule 34)

	'{'            shift, and enter state 81

	StmtBlock      goto state 98

State 64

	Stmt -> LExpr ':' ident . AStmt                     (rule 24)

	'='            shift, and enter state 54

	AStmt          goto state 97

State 65

	AStmt -> '=' RExpr . ';'                            (rule 35)
	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	';'            shift, and enter state 96
	'.'            shift, and enter state 52


State 66

	LExpr -> RExpr '.' ident .                          (rule 40)
	RExpr -> RExpr '.' ident . '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 40
	or             reduce using rule 40
	'='            reduce using rule 40
	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            reduce using rule 40
	'/'            reduce using rule 40
	'=='           reduce using rule 40
	'>='           reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'>'            reduce using rule 40
	'{'            reduce using rule 40
	'('            shift, and enter state 95
	')'            reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40
	'.'            reduce using rule 40
	':'            reduce using rule 40


State 67

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr '>' RExpr .                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 54
	or             reduce using rule 54
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           fail
	'>='           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'{'            reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	';'            reduce using rule 54
	'.'            shift, and enter state 52


State 68

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr '<=' RExpr .                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 51
	or             reduce using rule 51
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           fail
	'>='           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'{'            reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	';'            reduce using rule 51
	'.'            shift, and enter state 52


State 69

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr '<' RExpr .                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 52
	or             reduce using rule 52
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           fail
	'>='           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'{'            reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	';'            reduce using rule 52
	'.'            shift, and enter state 52


State 70

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr '>=' RExpr .                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 53
	or             reduce using rule 53
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           fail
	'>='           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'{'            reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	';'            reduce using rule 53
	'.'            shift, and enter state 52


State 71

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr '==' RExpr .                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 50
	or             reduce using rule 50
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           fail
	'>='           fail
	'<'            fail
	'<='           fail
	'>'            fail
	'{'            reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	';'            reduce using rule 50
	'.'            shift, and enter state 52


State 72

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr '/' RExpr .                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 47
	or             reduce using rule 47
	'+'            reduce using rule 47
	'-'            reduce using rule 47
	'*'            reduce using rule 47
	'/'            reduce using rule 47
	'=='           reduce using rule 47
	'>='           reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'>'            reduce using rule 47
	'{'            reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	';'            reduce using rule 47
	'.'            shift, and enter state 52


State 73

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr '*' RExpr .                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 46
	or             reduce using rule 46
	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	'=='           reduce using rule 46
	'>='           reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'>'            reduce using rule 46
	'{'            reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46
	'.'            shift, and enter state 52


State 74

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr '-' RExpr .                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 45
	or             reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           reduce using rule 45
	'>='           reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'>'            reduce using rule 45
	'{'            reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	'.'            shift, and enter state 52


State 75

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr '+' RExpr .                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 44
	or             reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           reduce using rule 44
	'>='           reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'>'            reduce using rule 44
	'{'            reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	'.'            shift, and enter state 52


State 76

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr or RExpr .                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            shift, and enter state 40
	or             reduce using rule 56
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	'{'            reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	';'            reduce using rule 56
	'.'            shift, and enter state 52


State 77

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr and RExpr .                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            reduce using rule 55
	or             reduce using rule 55
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	'{'            reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	';'            reduce using rule 55
	'.'            shift, and enter state 52


State 78

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)
	ActualArgs -> RExpr . ActArg                        (rule 61)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	')'            reduce using rule 62
	','            reduce using rule 62
	'.'            shift, and enter state 52

	ActArg         goto state 94

State 79

	RExpr -> ident '(' ActualArgs . ')'                 (rule 59)

	')'            shift, and enter state 93


State 80

	IfStmt -> if RExpr StmtBlock .                      (rule 29)

	ident          reduce using rule 29
	integer_literalreduce using rule 29
	string_literal reduce using rule 29
	def            reduce using rule 29
	if             reduce using rule 29
	elif           reduce using rule 29
	else           reduce using rule 29
	while          reduce using rule 29
	return         reduce using rule 29
	typecase       reduce using rule 29
	not            reduce using rule 29
	'-'            reduce using rule 29
	'}'            reduce using rule 29
	'('            reduce using rule 29
	%eof           reduce using rule 29


State 81

	StmtBlock -> '{' . Stmts '}'                        (rule 18)

	ident          reduce using rule 19
	integer_literalreduce using rule 19
	string_literal reduce using rule 19
	if             reduce using rule 19
	while          reduce using rule 19
	return         reduce using rule 19
	typecase       reduce using rule 19
	not            reduce using rule 19
	'-'            reduce using rule 19
	'}'            reduce using rule 19
	'('            reduce using rule 19

	Stmts          goto state 92

State 82

	Stmt -> while RExpr StmtBlock .                     (rule 22)

	ident          reduce using rule 22
	integer_literalreduce using rule 22
	string_literal reduce using rule 22
	def            reduce using rule 22
	if             reduce using rule 22
	while          reduce using rule 22
	return         reduce using rule 22
	typecase       reduce using rule 22
	not            reduce using rule 22
	'-'            reduce using rule 22
	'}'            reduce using rule 22
	'('            reduce using rule 22
	%eof           reduce using rule 22


State 83

	Stmt -> return RExpr ';' .                          (rule 27)

	ident          reduce using rule 27
	integer_literalreduce using rule 27
	string_literal reduce using rule 27
	def            reduce using rule 27
	if             reduce using rule 27
	while          reduce using rule 27
	return         reduce using rule 27
	typecase       reduce using rule 27
	not            reduce using rule 27
	'-'            reduce using rule 27
	'}'            reduce using rule 27
	'('            reduce using rule 27
	%eof           reduce using rule 27


State 84

	Typecase -> typecase RExpr '{' . TypeAlternative '}'    (rule 36)

	ident          reduce using rule 37
	'}'            reduce using rule 37

	TypeAlternativegoto state 91

State 85

	RExpr -> '(' RExpr ')' .                            (rule 49)

	and            reduce using rule 49
	or             reduce using rule 49
	'+'            reduce using rule 49
	'-'            reduce using rule 49
	'*'            reduce using rule 49
	'/'            reduce using rule 49
	'=='           reduce using rule 49
	'>='           reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'>'            reduce using rule 49
	'{'            reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	';'            reduce using rule 49
	'.'            reduce using rule 49


State 86

	ClassBody -> '{' Stmts Method . '}'                 (rule 12)
	Method -> Method . MethodRest                       (rule 14)

	def            shift, and enter state 89
	'}'            shift, and enter state 90

	MethodRest     goto state 87
	MR             goto state 88

State 87

	Method -> Method MethodRest .                       (rule 14)

	def            reduce using rule 14
	'}'            reduce using rule 14


State 88

	MethodRest -> MR . StmtBlock                        (rule 15)
	MethodRest -> MR . ':' ident StmtBlock              (rule 16)

	'{'            shift, and enter state 81
	':'            shift, and enter state 111

	StmtBlock      goto state 110

State 89

	MR -> def . ident '(' FormalArgs ')'                (rule 17)

	ident          shift, and enter state 109


State 90

	ClassBody -> '{' Stmts Method '}' .                 (rule 12)

	ident          reduce using rule 12
	integer_literalreduce using rule 12
	string_literal reduce using rule 12
	class          reduce using rule 12
	if             reduce using rule 12
	while          reduce using rule 12
	return         reduce using rule 12
	typecase       reduce using rule 12
	not            reduce using rule 12
	'-'            reduce using rule 12
	'('            reduce using rule 12
	%eof           reduce using rule 12


State 91

	Typecase -> typecase RExpr '{' TypeAlternative . '}'    (rule 36)
	TypeAlternative -> TypeAlternative . ident ':' ident StmtBlock    (rule 38)

	ident          shift, and enter state 107
	'}'            shift, and enter state 108


State 92

	StmtBlock -> '{' Stmts . '}'                        (rule 18)
	Stmts -> Stmts . Stmt                               (rule 20)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	if             shift, and enter state 18
	while          shift, and enter state 19
	return         shift, and enter state 20
	typecase       shift, and enter state 21
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'}'            shift, and enter state 106
	'('            shift, and enter state 24

	Stmt           goto state 10
	IfStmt         goto state 11
	Typecase       goto state 12
	LExpr          goto state 13
	RExpr          goto state 14

State 93

	RExpr -> ident '(' ActualArgs ')' .                 (rule 59)

	and            reduce using rule 59
	or             reduce using rule 59
	'+'            reduce using rule 59
	'-'            reduce using rule 59
	'*'            reduce using rule 59
	'/'            reduce using rule 59
	'=='           reduce using rule 59
	'>='           reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'>'            reduce using rule 59
	'{'            reduce using rule 59
	')'            reduce using rule 59
	','            reduce using rule 59
	';'            reduce using rule 59
	'.'            reduce using rule 59


State 94

	ActualArgs -> RExpr ActArg .                        (rule 61)
	ActArg -> ActArg . ',' RExpr                        (rule 63)

	')'            reduce using rule 61
	','            shift, and enter state 105


State 95

	RExpr -> RExpr '.' ident '(' . ActualArgs ')'       (rule 58)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24
	')'            reduce using rule 60

	LExpr          goto state 30
	RExpr          goto state 78
	ActualArgs     goto state 104

State 96

	AStmt -> '=' RExpr ';' .                            (rule 35)

	ident          reduce using rule 35
	integer_literalreduce using rule 35
	string_literal reduce using rule 35
	def            reduce using rule 35
	if             reduce using rule 35
	while          reduce using rule 35
	return         reduce using rule 35
	typecase       reduce using rule 35
	not            reduce using rule 35
	'-'            reduce using rule 35
	'}'            reduce using rule 35
	'('            reduce using rule 35
	%eof           reduce using rule 35


State 97

	Stmt -> LExpr ':' ident AStmt .                     (rule 24)

	ident          reduce using rule 24
	integer_literalreduce using rule 24
	string_literal reduce using rule 24
	def            reduce using rule 24
	if             reduce using rule 24
	while          reduce using rule 24
	return         reduce using rule 24
	typecase       reduce using rule 24
	not            reduce using rule 24
	'-'            reduce using rule 24
	'}'            reduce using rule 24
	'('            reduce using rule 24
	%eof           reduce using rule 24


State 98

	ElseStmt -> else StmtBlock .                        (rule 34)

	ident          reduce using rule 34
	integer_literalreduce using rule 34
	string_literal reduce using rule 34
	def            reduce using rule 34
	if             reduce using rule 34
	while          reduce using rule 34
	return         reduce using rule 34
	typecase       reduce using rule 34
	not            reduce using rule 34
	'-'            reduce using rule 34
	'}'            reduce using rule 34
	'('            reduce using rule 34
	%eof           reduce using rule 34


State 99

	ElifStmt -> ElifStmt elif RExpr . StmtBlock         (rule 32)
	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	'{'            shift, and enter state 81
	'.'            shift, and enter state 52

	StmtBlock      goto state 103

State 100

	FormalArgs -> ident ':' . ident IDs                 (rule 9)

	ident          shift, and enter state 102


State 101

	CS -> class ident '(' FormalArgs ')' .              (rule 7)

	extends        reduce using rule 7
	'{'            reduce using rule 7


State 102

	FormalArgs -> ident ':' ident . IDs                 (rule 9)

	')'            reduce using rule 10
	','            reduce using rule 10

	IDs            goto state 117

State 103

	ElifStmt -> ElifStmt elif RExpr StmtBlock .         (rule 32)

	ident          reduce using rule 32
	integer_literalreduce using rule 32
	string_literal reduce using rule 32
	def            reduce using rule 32
	if             reduce using rule 32
	elif           reduce using rule 32
	else           reduce using rule 32
	while          reduce using rule 32
	return         reduce using rule 32
	typecase       reduce using rule 32
	not            reduce using rule 32
	'-'            reduce using rule 32
	'}'            reduce using rule 32
	'('            reduce using rule 32
	%eof           reduce using rule 32


State 104

	RExpr -> RExpr '.' ident '(' ActualArgs . ')'       (rule 58)

	')'            shift, and enter state 116


State 105

	ActArg -> ActArg ',' . RExpr                        (rule 63)

	ident          shift, and enter state 15
	integer_literalshift, and enter state 16
	string_literal shift, and enter state 17
	not            shift, and enter state 22
	'-'            shift, and enter state 23
	'('            shift, and enter state 24

	LExpr          goto state 30
	RExpr          goto state 115

State 106

	StmtBlock -> '{' Stmts '}' .                        (rule 18)

	ident          reduce using rule 18
	integer_literalreduce using rule 18
	string_literal reduce using rule 18
	def            reduce using rule 18
	if             reduce using rule 18
	elif           reduce using rule 18
	else           reduce using rule 18
	while          reduce using rule 18
	return         reduce using rule 18
	typecase       reduce using rule 18
	not            reduce using rule 18
	'-'            reduce using rule 18
	'}'            reduce using rule 18
	'('            reduce using rule 18
	%eof           reduce using rule 18


State 107

	TypeAlternative -> TypeAlternative ident . ':' ident StmtBlock    (rule 38)

	':'            shift, and enter state 114


State 108

	Typecase -> typecase RExpr '{' TypeAlternative '}' .    (rule 36)

	ident          reduce using rule 36
	integer_literalreduce using rule 36
	string_literal reduce using rule 36
	def            reduce using rule 36
	if             reduce using rule 36
	while          reduce using rule 36
	return         reduce using rule 36
	typecase       reduce using rule 36
	not            reduce using rule 36
	'-'            reduce using rule 36
	'}'            reduce using rule 36
	'('            reduce using rule 36
	%eof           reduce using rule 36


State 109

	MR -> def ident . '(' FormalArgs ')'                (rule 17)

	'('            shift, and enter state 113


State 110

	MethodRest -> MR StmtBlock .                        (rule 15)

	def            reduce using rule 15
	'}'            reduce using rule 15


State 111

	MethodRest -> MR ':' . ident StmtBlock              (rule 16)

	ident          shift, and enter state 112


State 112

	MethodRest -> MR ':' ident . StmtBlock              (rule 16)

	'{'            shift, and enter state 81

	StmtBlock      goto state 121

State 113

	MR -> def ident '(' . FormalArgs ')'                (rule 17)

	ident          shift, and enter state 60
	')'            reduce using rule 8

	FormalArgs     goto state 120

State 114

	TypeAlternative -> TypeAlternative ident ':' . ident StmtBlock    (rule 38)

	ident          shift, and enter state 119


State 115

	LExpr -> RExpr . '.' ident                          (rule 40)
	RExpr -> RExpr . '+' RExpr                          (rule 44)
	RExpr -> RExpr . '-' RExpr                          (rule 45)
	RExpr -> RExpr . '*' RExpr                          (rule 46)
	RExpr -> RExpr . '/' RExpr                          (rule 47)
	RExpr -> RExpr . '==' RExpr                         (rule 50)
	RExpr -> RExpr . '<=' RExpr                         (rule 51)
	RExpr -> RExpr . '<' RExpr                          (rule 52)
	RExpr -> RExpr . '>=' RExpr                         (rule 53)
	RExpr -> RExpr . '>' RExpr                          (rule 54)
	RExpr -> RExpr . and RExpr                          (rule 55)
	RExpr -> RExpr . or RExpr                           (rule 56)
	RExpr -> RExpr . '.' ident '(' ActualArgs ')'       (rule 58)
	ActArg -> ActArg ',' RExpr .                        (rule 63)

	and            shift, and enter state 40
	or             shift, and enter state 41
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'=='           shift, and enter state 46
	'>='           shift, and enter state 47
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'>'            shift, and enter state 50
	')'            reduce using rule 63
	','            reduce using rule 63
	'.'            shift, and enter state 52


State 116

	RExpr -> RExpr '.' ident '(' ActualArgs ')' .       (rule 58)

	and            reduce using rule 58
	or             reduce using rule 58
	'+'            reduce using rule 58
	'-'            reduce using rule 58
	'*'            reduce using rule 58
	'/'            reduce using rule 58
	'=='           reduce using rule 58
	'>='           reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'>'            reduce using rule 58
	'{'            reduce using rule 58
	')'            reduce using rule 58
	','            reduce using rule 58
	';'            reduce using rule 58
	'.'            reduce using rule 58


State 117

	FormalArgs -> ident ':' ident IDs .                 (rule 9)
	IDs -> IDs . ',' ident ':' ident                    (rule 11)

	')'            reduce using rule 9
	','            shift, and enter state 118


State 118

	IDs -> IDs ',' . ident ':' ident                    (rule 11)

	ident          shift, and enter state 124


State 119

	TypeAlternative -> TypeAlternative ident ':' ident . StmtBlock    (rule 38)

	'{'            shift, and enter state 81

	StmtBlock      goto state 123

State 120

	MR -> def ident '(' FormalArgs . ')'                (rule 17)

	')'            shift, and enter state 122


State 121

	MethodRest -> MR ':' ident StmtBlock .              (rule 16)

	def            reduce using rule 16
	'}'            reduce using rule 16


State 122

	MR -> def ident '(' FormalArgs ')' .                (rule 17)

	'{'            reduce using rule 17
	':'            reduce using rule 17


State 123

	TypeAlternative -> TypeAlternative ident ':' ident StmtBlock .    (rule 38)

	ident          reduce using rule 38
	'}'            reduce using rule 38


State 124

	IDs -> IDs ',' ident . ':' ident                    (rule 11)

	':'            shift, and enter state 125


State 125

	IDs -> IDs ',' ident ':' . ident                    (rule 11)

	ident          shift, and enter state 126


State 126

	IDs -> IDs ',' ident ':' ident .                    (rule 11)

	')'            reduce using rule 11
	','            reduce using rule 11


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 64
Number of terminals: 41
Number of non-terminals: 26
Number of states: 127
